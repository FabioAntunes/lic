import isel.leic.usbio.UsbPort;
import isel.leic.utils.Time;


public class KBD {
	public static final int KEY_MASK = 0x0F;
	public static final int K_VAL_MASK = 0x80;
	public static final int K_ACK_MASK = 0xFE;
	public static final char NONE = 0; // Valor retornado quando não há tecla.
	private static final boolean SCAN_SOFTWARE = true; // Mudar na implementação 2.
	private static char[] keys;
	
	
	
	/**
	 * Retorna de imediato a tecla premida ou NONE se não há tecla premida.
	 * @return Tecla lida de forma nao bloqueante
	 */
	public static char getKey(){
		int in_val = 0;
		in_val = ~UsbPort.in();
		if ((in_val&K_VAL_MASK) == K_VAL_MASK){
			//aplicar mascara e obter a tecla
			System.out.println("teste " + (in_val&KEY_MASK));
			//K_ACK
			UsbPort.out(K_ACK_MASK);
			while(true){
				if(( ~UsbPort.in()&K_VAL_MASK) != K_VAL_MASK){
					UsbPort.out(0xFF);
					break;
				}
				Time.sleep(100);
			}
			return 'a';
		}
		
		UsbPort.out(1);
		return NONE;
		
	}
	// Retorna quando a tecla for premida ou NONE após decorrido ‘timeout’ milisegundos.
	public static char waitKey(long timeout){
		long startTime = Time.getTimeInMillis();
		long currentTime = Time.getTimeInMillis();
		char returnedChar;
		while (currentTime - startTime <= timeout) {
			returnedChar = getKey();
			if(returnedChar != NONE){
				return returnedChar; 
			}
			
			currentTime = Time.getTimeInMillis();
		}
		return NONE;
		
	}
	// Estabelece os valores iniciais no porto de saída. Chamado no início do programa.
	public static void init(){
		UsbPort.out(127);
	}

}
